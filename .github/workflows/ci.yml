name: CI

on:
  push:
    branches: [ main, ops/**, ci/**, feat/**, fix/** ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Root tidy guard
        run: |
          python3 scripts/inventory_root.py --assert-clean || (echo "Root not tidy. Run make tidy-root." && exit 1)

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest

      - name: Run pre-commit on changed files (non-blocking)
        run: |
          # install pre-commit and run it only on files modified relative to main
          python -m pip install --upgrade pip
          pip install pre-commit
          git fetch origin main --quiet || true
          CHANGED=$(git diff --name-only origin/main...HEAD || true)
          if [ -z "$CHANGED" ]; then
            echo "No changed files relative to origin/main; skipping pre-commit run."
          else
            echo "Running pre-commit on changed files:" $CHANGED
            # run in a way that reports results but does not fail the job
            pre-commit run --show-diff-on-failure --files $CHANGED || true
          fi

      - name: Install Node dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Run Python tests
        run: bash scripts/run_tests.sh -q

      - name: Run Node tests
        run: npm test

      - name: Operator validator gate
        run: |
          python scripts/validate_operators.py
          python - <<'PY'
          import json,sys
          d=json.load(open('artifacts/ci_smoke/operator_mapping.json'))
          assert d.get('refs_ok') is True and not d.get('errors'), d
          PY

      - name: Contradiction quick check
        run: |
          python - <<'PY'
          from tools.logic.detector import detect
          assert detect(["P(a)","not P(a)"])['x_g'] > 0.0
          assert detect(["P(a)","Q(a)"])['x_g'] == 0.0
          PY

      - name: Archive ontology mapping
        uses: actions/upload-artifact@v4
        with:
          name: operator-mapping
          path: artifacts/ci_smoke/operator_mapping.*
