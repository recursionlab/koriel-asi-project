name: Bot Verify
on:
  push:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: read

concurrency:
  group: bot-verify-${{ github.ref }}
  cancel-in-progress: true

jobs:
  perm-probe:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.open.outputs.pull-request-number }}
    steps:
      - uses: actions/checkout@v4
      - name: Touch probe file
        run: |
          mkdir -p .github
          echo "probe $(date -u)" >> .github/perm_probe.txt
      - name: Open probe PR (verifies write perms)
        id: open
        uses: peter-evans/create-pull-request@v6
        with:
          branch: probe/perm-${{ github.run_id }}
          title: "perm-probe"
          commit-message: "perm-probe: verify GITHUB_TOKEN write"
          body: "Automated permissions probe"
          delete-branch: true

      - name: Summarize perm result
        run: |
          if [ -n "${{ steps.open.outputs.pull-request-number }}" ]; then
            echo "### perm-probe: PASS (PR #${{ steps.open.outputs.pull-request-number }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "### perm-probe: FAIL (no PR opened)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  ingest:
    needs: perm-probe
    runs-on: ubuntu-latest
    outputs:
      touched: ${{ steps.extract.outputs.count }}
      pr_number: ${{ steps.cpr.outputs.pull-request-number }}
    steps:
      - uses: actions/checkout@v4
      - name: System deps
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils
      - name: Extract PDFs and write stubs
        id: extract
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          from pathlib import Path
          import subprocess, json, re, hashlib, datetime as dt, os
          root=Path("."); out=Path("ops/ingest"); out.mkdir(parents=True, exist_ok=True)
          meta=Path("docs/Meta-ToC.md"); opsf=Path("spec/operators.md"); invf=Path("spec/invariants.md")
          agents=Path("prompts/agents.jsonl"); bundle=Path("ops/context_bundle.json")
          touched=[]
          src=Path("research/new")
          if src.exists():
              for p in src.rglob("*.pdf"):
                  txt=out/(p.stem+".txt"); txt.parent.mkdir(parents=True, exist_ok=True)
                  subprocess.run(["pdftotext","-layout",str(p),str(txt)], check=True)
                  T=txt.read_text(encoding="utf-8", errors="ignore")
                  title=re.findall(r"^[^\n]{8,120}", T, re.M)
                  title=(title[0].strip() if title else p.stem)
                  h=hashlib.sha1((title+str(p.stat().st_size)).encode()).hexdigest()[:8]
                  meta.parent.mkdir(parents=True, exist_ok=True)
                  line=f"- {title} [{dt.date.today()}] (id:{h})"
                  cur=meta.read_text(encoding="utf-8") if meta.exists() else "# Meta-ToC\n"
                  if line not in cur:
                      meta.write_text(cur.rstrip()+"\n"+line+"\n", encoding="utf-8")
                  opsf.parent.mkdir(parents=True, exist_ok=True)
                  opsf.write_text((opsf.read_text(encoding="utf-8") if opsf.exists() else "") +
                                  f"\n## OP-{h} {title}\n- Inputs: TBA\n- Transform: TBA\n- Outputs: TBA\n- Source: research/new/{p.name}\n",
                                  encoding="utf-8")
                  invf.parent.mkdir(parents=True, exist_ok=True)
                  invf.write_text((invf.read_text(encoding="utf-8") if invf.exists() else "") +
                                  f"\n### I-{h} {title}\n- Claim: TBA\n- Evidence: research/new/{p.name}\n",
                                  encoding="utf-8")
                  agents.parent.mkdir(parents=True, exist_ok=True)
                  with agents.open("a", encoding="utf-8") as f:
                      f.write(json.dumps({"name":f"Reader_{h}","role":f"Summarize {title} and propose links (id:{h})"}, ensure_ascii=False)+"\n")
                  touched.append(str(p))
          bundle=Path("ops/context_bundle.json"); bundle.parent.mkdir(parents=True, exist_ok=True)
          bundle.write_text(json.dumps(
              {"context_file":"docs/CONTEXT.md",
               "system_prompt":"prompts/system.md",
               "agents_config":"prompts/agents.jsonl",
               "version":"v0.1",
               "pdfs": touched}, indent=2), encoding="utf-8")
          out = f"count={len(touched)}\n"
          Path(os.environ["GITHUB_OUTPUT"]).write_text(out)
          PY
      - name: Create ingest PR (only if changes)
        id: cpr
        if: steps.extract.outputs.count != '0'
        uses: peter-evans/create-pull-request@v6
        with:
          branch: auto/ingest-${{ github.run_id }}
          title: "ingest: mesh PDFs â†’ stubs"
          commit-message: "ingest: mesh PDFs into stubs and context bundle"
          body: "Auto-generated by Bot Verify."
          labels: auto-mesh, needs-curation
          delete-branch: true

      - name: Summarize ingest result
        run: |
          if [ "${{ steps.extract.outputs.count }}" = "0" ]; then
            echo "### ingest: SKIPPED (no PDFs found)" >> $GITHUB_STEP_SUMMARY
          elif [ -n "${{ steps.cpr.outputs.pull-request-number }}" ]; then
            echo "### ingest: PR #${{ steps.cpr.outputs.pull-request-number }} (touched=${{ steps.extract.outputs.count }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ingest: FAIL (changes detected but no PR)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
